/*  Student information for assignment:
 *
 *  On my honor, <NAME>, this programming assignment is my own work
 *  and I have not provided this code to any other student.
 *
 *  UTEID: PK9297
 *  email address: preeth.kanamangala@gmail.com
 *  Grader name: Amir
 *  Number of slip days I am using:
 */

import java.util.ArrayList;
import java.util.List;

/**
 * Shell for a binary search tree class.
 * @author scottm
 * @param <E> The data type of the elements of this BinartSearchTree.
 * Must implement Comparable or inherit from a class that implements
 * Comparable.
 *
 */
public class BinarySearchTree<E extends Comparable<? super E>> {

    private BSTNode<E> root;
    private int size;
    // CS314 students. Add any other instance variables you want here
    // REMEMBER TO SAY USED MIKE SCOTT CODE

    public void BinarySeachTree() {
    	root = new BSTNode<E>();
    	size = -1;
    }

    /**
     *  Add the specified item to this Binary Search Tree if it is not already present.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: Add value to this tree if not already present. Return true if this tree
     *  changed as a result of this method call, false otherwise.
     *  @param value the value to add to the tree
     *  @return false if an item equivalent to value is already present
     *  in the tree, return true if value is added to the tree and size() = old size() + 1
     */
    public boolean add(E value) {
        if(value == null) {
        	throw new IllegalArgumentException("Pre-conditions are not satisfied.");
        }
        
        int oldSize = size;
        root = addHelper(root, value);
        return oldSize != size;
    }
    
    public BSTNode<E> addHelper(BSTNode<E> n, E value) {
    	if (n == null) {
    		size++;
    		return new BSTNode<>(value);
    	} else {
    		int direction = value.compareTo(n.getData());
    		if (direction < 0) {
    			n.setLeft(addHelper(n.getLeft(), value));
    		} else if (direction > 0) {
    			n.setRight(addHelper(n.getRight(), value));
    		}
    	}

    	return n;
    }

    /**
     *  Remove a specified item from this Binary Search Tree if it is present.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: Remove value from the tree if present, return true if this tree
     *  changed as a result of this method call, false otherwise.
     *  @param value the value to remove from the tree if present
     *  @return false if value was not present
     *  returns true if value was present and size() = old size() - 1
     */
    public boolean remove(E value) {
        if (value == null) {
        	return false;
        }

    	int oldSize = size;
        root = removeHelper(root, value);
        return oldSize != size;
    }

    public BSTNode<E> removeHelper(BSTNode<E> n, E value) {
    	if(n == null) {
    		return n;
    	} else if(n.getData().equals(value)) {
    		size--;
    		if(n.getLeft() == null && n.getRight() == null) {
    			return null;
    		} else if (n.getLeft() != null && n.getRight() != null) {
    			E newData = minModified(root.getRight());
        		remove(newData);
    			n.setData(newData);
    			return n;
    		} else {
    			if(n.getLeft() != null) {
    				return n.getLeft();
    			} else if(n.getRight() != null) {
    				return n.getRight();
    			}
    		}
    	} else {
    		int direction = value.compareTo(n.getData());
    		if (direction < 0) {
    			n.setLeft(removeHelper(n.getLeft(), value));
    		} else if (direction > 0) {
    			n.setRight(removeHelper(n.getRight(), value));
    		}
    	}
    	return n;
    }
    
    /**
     *  Check to see if the specified element is in this Binary Search Tree.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: return true if value is present in tree, false otherwise
     *  @param value the value to look for in the tree
     *  @return true if value is present in this tree, false otherwise
     */
    public boolean isPresent(E value) {
        if(value == null) {
        	throw new IllegalArgumentException("Pre-conditions are not satisfied.");
        }
        
        return isPresentHelper(root, value);
    }

    public boolean isPresentHelper(BSTNode<E> n, E value) {
    	if(n == null) {
    		return false;
    	}
    	if(n.getData().equals(value)) {
    		return true;
    	}
    	
    	return isPresentHelper(n.getLeft(), value) || isPresentHelper(n.getRight(), value);
    }
    /**
     *  Return how many elements are in this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return the number of items in this tree
     *  @return the number of items in this Binary Search Tree
     */
    public int size() {
        return size;
    }

    /**
     *  return the height of this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return the height of this tree.
     *  If the tree is empty return -1, otherwise return the
     *  height of the tree
     *  @return the height of this tree or -1 if the tree is empty
     */
    public int height() {
        return heightHelper(root);
    }

    public int heightHelper(BSTNode<E> n) {
    	if(n == null) {
    		return -1;
    	}
    	int rightMax = heightHelper(n.getRight());
    	int leftMax = heightHelper(n.getLeft());
    	
    	return Math.max(rightMax, leftMax) + 1;
    }
    /**
     *  Return a list of all the elements in this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return a List object with all data from the tree in ascending order. 
     *  If the tree is empty return an empty List
     *  @return a List object with all data from the tree in sorted order
     *  if the tree is empty return an empty List
     */
    public List<E> getAll() {
        return getAllHelper(root, new ArrayList<E>());
    }

    public List<E> getAllHelper(BSTNode<E> n, ArrayList<E> dataList){
    	if(n == null) {
    		return null;
    	}
    	
    	getAllHelper(n.getLeft(), dataList);
    	dataList.add(n.getData());
    	getAllHelper(n.getRight(), dataList);
    	return dataList;
    }

    /**
     * return the maximum value in this binary search tree.
     * <br>
     * pre: <tt>size()</tt> > 0<br>
     * post: return the largest value in this Binary Search Tree
     * @return the maximum value in this tree
     */
    public E max() {
        BSTNode<E> temp = root;
        E max = null;
    	while(temp != null) {
    		max = temp.getData();
    		temp = temp.getRight();
    	}
    	
    	return max;
    }

    /**
     * return the minimum value in this binary search tree.
     * <br>
     * pre: <tt>size()</tt> > 0<br>
     * post: return the smallest value in this Binary Search Tree
     * @return the minimum value in this tree
     */
    public E min() {
        BSTNode<E> temp = root;
        E min = null;
    	while(temp != null) {
    		min = temp.getData();
    		temp = temp.getLeft();
    	}
    	
    	return min;
    }
    
    public E minModified(BSTNode<E> n) {
        E min = null;
    	while(n != null) {
    		min = n.getData();
    		n = n.getLeft();
    	}
    	
    	return min;
    }

    /**
     * An add method that implements the add algorithm iteratively instead of recursively.
     * <br>pre: data != null
     * <br>post: if data is not present add it to the tree, otherwise do nothing.
     * @param data the item to be added to this tree
     * @return true if data was not present before this call to add, false otherwise.
     */
    public boolean iterativeAdd(E data) {
        if(data == null) {
        	throw new IllegalArgumentException("Pre-conditions are not satisfied.");
        }

        BSTNode<E> temp = root;
        BSTNode<E> newNode = new BSTNode<>(data);
        if (temp == null) {
        	size++;
        	temp = newNode;
        }
        
        BSTNode<E> tempParentNode = null;
        
        while(temp != null) {
    		tempParentNode = temp;
        	int direction = data.compareTo(temp.getData());
    		if (direction < 0) {
    			temp = temp.getLeft();
    		} else if (direction > 0) {
    			temp = temp.getRight();
    		} else {
    			return false;
    		}
        }
        
        size++;
    	int direction = data.compareTo(tempParentNode.getData());
		if (direction < 0) {
			tempParentNode.setLeft(newNode);
		} else if (direction > 0) {
			tempParentNode.setRight(newNode);
		}

        return true;
    }


    /**
     * Return the "kth" element in this Binary Search Tree. If kth = 0 the 
     * smallest value (minimum) is returned. If kth = 1 the second smallest value is
     * returned, and so forth.
     * <br>pre: 0 <= kth < size()
     * @param kth indicates the rank of the element to get
     * @return the kth value in this Binary Search Tree
     */
    public E get(int kth) {
        return null;
    }


    /**
     * Return a List with all values in this Binary Search Tree that are less than
     * the parameter <tt>value</tt>.
     * <tt>value</tt> != null<br>
     * @param value the cutoff value
     * @return a List with all values in this tree that are less than the parameter value. If there are
     * no values in this tree less than value return an empty list. The elements of the list are in ascending order.
     */
    public List<E> getAllLessThan(E value) {
        return null;
    }


    /**
     * Return a List with all values in this Binary Search Tree that are greater than
     * the parameter <tt>value</tt>.
     * <tt>value</tt> != null<br>
     * @param value the cutoff value
     * @return a List with all values in this tree that are greater than the parameter value. If there are
     * no values in this tree greater than value return an empty list. The elements of the list are in ascending order.
     */
    public List<E> getAllGreaterThan(E value) {
        return null;
    }



    /**
     * Find the number of nodes in this tree at the specified depth.
     * <br>pre: none
     * @param d The target depth.
     * @return The number of nodes in this tree at a depth equal to
     * the parameter d.
     */
    public int numNodesAtDepth(int d) {
        return -1;
    }

    /**
     * Prints a vertical representation of this tree.
     * The tree has been rotated counter clockwise 90
     * degrees. The root is on the left. Each node is printed
     * out on its own row. A node's children will not necessarily
     * be at the rows directly above and below a row. They will
     * be indented three spaces from the parent. Nodes indented the
     * same amount are at the same depth.
     * <br>pre: none
     */
    public void printTree() {
        printTree(root, "");
    }

    private void printTree(BSTNode<E> n, String spaces) {
        if(n != null){
            printTree(n.getRight(), spaces + "  ");
            System.out.println(spaces + n.getData());
            printTree(n.getLeft(), spaces + "  ");
        }
    }

    private static class BSTNode<E extends Comparable<? super E>> {
        private E data;
        private BSTNode<E> left;
        private BSTNode<E> right;

        public BSTNode() {
            this(null);
        }

        public BSTNode(E initValue) {
            this(null, initValue, null); 
        }

        public BSTNode(BSTNode<E> initLeft,
                E initValue,        
                BSTNode<E> initRight) {
            data = initValue; 
            left = initLeft; 
            right = initRight; 
        }

        public E getData() { 
            return data; 
        }

        public BSTNode<E> getLeft() { 
            return left;
        }

        public BSTNode<E> getRight() { 
            return right; 
        }

        public void setData(E theNewValue) { 
            data = theNewValue; 
        }

        public void setLeft(BSTNode<E> theNewLeft) { 
            left = theNewLeft; 
        }

        public void setRight(BSTNode<E> theNewRight) { 
            right = theNewRight; 
        }    
    }
}