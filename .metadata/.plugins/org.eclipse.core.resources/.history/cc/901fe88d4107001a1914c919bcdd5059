/*  Student information for assignment:
 *
 *  On my honor, <NAME>, this programming assignment is my own work
 *  and I have not provided this code to any other student.
 *
 *  UTEID: PK9297
 *  email address: preeth.kanamangala@gmail.com
 *  Grader name: Amir
 *  Number of slip days I am using:
 */

import java.util.ArrayList;
import java.util.List;

/**
 * Shell for a binary search tree class.
 * @author scottm
 * @param <E> The data type of the elements of this BinartSearchTree.
 * Must implement Comparable or inherit from a class that implements
 * Comparable.
 *
 */
public class BinarySearchTree<E extends Comparable<? super E>> {

    private BSTNode<E> root;
    private int size;
    // CS314 students. Add any other instance variables you want here

	public void BinarySeachTree() {
		root = null;
		size = 0;
	}

    /**
     *  Add the specified item to this Binary Search Tree if it is not already present.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: Add value to this tree if not already present. Return true if this tree
     *  changed as a result of this method call, false otherwise.
     *  @param value the value to add to the tree
     *  @return false if an item equivalent to value is already present
     *  in the tree, return true if value is added to the tree and size() = old size() + 1
     */
	// this method came from the code that Mike Scott developed in lecture
	public boolean add(E value) {
		if (value == null) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}

		int oldSize = size;
		root = addHelper(root, value);
		return oldSize != size;
	}
    
	// this helper method does the actual recursion for the add method
	public BSTNode<E> addHelper(BSTNode<E> n, E value) {
		if (n == null) { // the base case is when we reach an empty space for our new value
			size++;
			return new BSTNode<>(value);
		} else {
			int direction = value.compareTo(n.getData());
			if (direction < 0) { // if the value is less than the current node
				n.setLeft(addHelper(n.getLeft(), value));
			} else if (direction > 0) { // if the value is greater than the current node
				n.setRight(addHelper(n.getRight(), value));
			}
		}

		return n;
	}

    /**
     *  Remove a specified item from this Binary Search Tree if it is present.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: Remove value from the tree if present, return true if this tree
     *  changed as a result of this method call, false otherwise.
     *  @param value the value to remove from the tree if present
     *  @return false if value was not present
     *  returns true if value was present and size() = old size() - 1
     */
	// this method came from the code that Mike Scott developed in lecture
	public boolean remove(E value) {
		if (value == null) {
			return false;
		}

		int oldSize = size;
		root = removeHelper(root, value);
		return oldSize != size;
	}

	// this helper method does the actual recursion for the remove method
	public BSTNode<E> removeHelper(BSTNode<E> n, E value) {
		if (n == null) { // when we reach a dead end we just return the current node
			return n;
		} else if (n.getData().equals(value)) { // when the node value matches
			size--;
			if (n.getLeft() == null && n.getRight() == null) { // if the node has no children
				return null;
			} else if (n.getLeft() != null && n.getRight() != null) { // if the node has two children
				E minOfRightSubTree = minOfSubTree(root.getRight()); // we get the minimum of the right sub-tree
				remove(minOfRightSubTree); // remove the minimum of the right sub-tree
				size++; // increment size since we actually replaced not removed
				n.setData(minOfRightSubTree); // then replace the current node with the min of right sub-tree
				return n;
			} else { // the the node has one child
				return n.getLeft() != null ? n.getLeft() : n.getRight(); // return the one that isn't null
			}
		} else {
			int direction = value.compareTo(n.getData());
			if (direction < 0) { // if the value is less than the current node
				n.setLeft(removeHelper(n.getLeft(), value));
			} else if (direction > 0) { // if the value is greater than the current node
				n.setRight(removeHelper(n.getRight(), value));
			}
		}
		
		return n;
	}
    
    /**
     *  Check to see if the specified element is in this Binary Search Tree.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: return true if value is present in tree, false otherwise
     *  @param value the value to look for in the tree
     *  @return true if value is present in this tree, false otherwise
     */
	public boolean isPresent(E value) {
		if (value == null) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}

		return isPresentHelper(root, value);
	}

	// this helper method does the actual recursion for the is present method
	public boolean isPresentHelper(BSTNode<E> n, E value) {
		if (n == null) { // if we reach a dead end, the value isn't along this path
			return false;
		}
		if (n.getData().equals(value)) {
			return true;
		}

		return isPresentHelper(n.getLeft(), value) || isPresentHelper(n.getRight(), value); // it could be in the right sub-tree OR the left sub-tree
	}
	
    /**
     *  Return how many elements are in this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return the number of items in this tree
     *  @return the number of items in this Binary Search Tree
     */
	public int size() {
		return size;
	}

    /**
     *  return the height of this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return the height of this tree.
     *  If the tree is empty return -1, otherwise return the
     *  height of the tree
     *  @return the height of this tree or -1 if the tree is empty
     */
	// this method came from the code that Mike Scott developed in lecture
	public int height() {
		return heightHelper(root);
	}

	// this helper method does the actual recursion for the height method
	public int heightHelper(BSTNode<E> n) {
		if (n == null) {
			return -1;
		}

		int rightMaxHeight = heightHelper(n.getRight()); // the max height of the right sub-tree
		int leftMaxHeight = heightHelper(n.getLeft()); // the max height of the left sub-tree

		return Math.max(rightMaxHeight, leftMaxHeight) + 1; // we add one every time we go one node deeper
	}
    
    /**
     *  Return a list of all the elements in this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return a List object with all data from the tree in ascending order. 
     *  If the tree is empty return an empty List
     *  @return a List object with all data from the tree in sorted order
     *  if the tree is empty return an empty List
     */
	public List<E> getAll() {
		return getAllHelper(root, new ArrayList<E>());
	}

	// this helper method does the actual recursion for the get all method
	public List<E> getAllHelper(BSTNode<E> n, ArrayList<E> elementList) {
		if (n == null) { // if we reach a null node we don't do anything
			return elementList;
		}

		getAllHelper(n.getLeft(), elementList); // we go all the way down the left sub-tree then keep "backtracking" out
		elementList.add(n.getData()); // we add each non-null value we find
		getAllHelper(n.getRight(), elementList);
		return elementList;
	}

    /**
     * return the maximum value in this binary search tree.
     * <br>
     * pre: <tt>size()</tt> > 0<br>
     * post: return the largest value in this Binary Search Tree
     * @return the maximum value in this tree
     */
	public E max() {
		if (size() <= 0) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}

		BSTNode<E> temp = root;
		E max = null;
		while (temp != null) {
			max = temp.getData();
			temp = temp.getRight(); // we go all the way down the right sub-tree until we hit null
		}

		return max;
	}

    /**
     * return the minimum value in this binary search tree.
     * <br>
     * pre: <tt>size()</tt> > 0<br>
     * post: return the smallest value in this Binary Search Tree
     * @return the minimum value in this tree
     */
	public E min() {
		if (size() <= 0) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}
		
		BSTNode<E> temp = root;
		E min = null;
		while (temp != null) {
			min = temp.getData();
			temp = temp.getLeft(); // we go all the way down the left sub-tree until we hit null
		}

		return min;
	}

	// this method returns the minimum value in a tree starting from a provided node
	public E minOfSubTree(BSTNode<E> n) {
		E min = null;
		while (n != null) {
			min = n.getData();
			n = n.getLeft(); // we go all the way down the left sub-tree of this node until we hit null
		}

		return min;
	}

    /**
     * An add method that implements the add algorithm iteratively instead of recursively.
     * <br>pre: data != null
     * <br>post: if data is not present add it to the tree, otherwise do nothing.
     * @param data the item to be added to this tree
     * @return true if data was not present before this call to add, false otherwise.
     */
	public boolean iterativeAdd(E data) {
		if (data == null) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}

		BSTNode<E> temp = root;
		BSTNode<E> newNode = new BSTNode<>(data); // this is the node that contains the data we want to add
		if (temp == null) { // if the tree is is empty, then we immediately set our root to the new node
			size++;
			root = newNode;
			return true;
		}

		BSTNode<E> tempParentNode = null; // this is the parent node of temp node
		while (temp != null) { // when temp hits null, that is the spot we want to place our new node
			tempParentNode = temp; 
			int direction = data.compareTo(temp.getData());
			if (direction == 0) { // if the value already exists, then immediately return false
				return false;
			}
			temp = direction < 0 ? temp.getLeft() : temp.getRight(); // go down left or right path depending on compareTo

		}
		size++;
		int direction = data.compareTo(tempParentNode.getData());
		if (direction < 0) {
			tempParentNode.setLeft(newNode);
		} else if (direction > 0) {
			tempParentNode.setRight(newNode);
		}

		return true;
	}

    /**
     * Return the "kth" element in this Binary Search Tree. If kth = 0 the 
     * smallest value (minimum) is returned. If kth = 1 the second smallest value is
     * returned, and so forth.
     * <br>pre: 0 <= kth < size()
     * @param kth indicates the rank of the element to get
     * @return the kth value in this Binary Search Tree
     */
	public E get(int kth) {
		if (kth < 0 || kth >= size()) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}

		return getHelper(root, kth);
	}

	// this helper method does the actual recursion for the get method
	private E getHelper(BSTNode<E> n, int kth) {
		if (kth == sizeOfSubTree(n.getLeft())) { // since kth has 0 based indexing, this statement means we are ON the node with the kth value
			return n.getData();
		} else if (kth < sizeOfSubTree(n.getLeft())) { // this means that the value is somewhere in the left sub-tree
			return getHelper(n.getLeft(), kth);
		} else { // otherwise, the value has to be in the right sub-tree
			return getHelper(n.getRight(), kth - sizeOfSubTree(n.getLeft()) - 1);
		}
	}

	// this method calculates the size of a tree starting from a provided node
	private int sizeOfSubTree(BSTNode<E> n) {
		int subTreeSize = 0;
		if (n == null) { // if the node is null, this path has a dead end
			return 0;
		} else { // otherwise, we increment the size
			subTreeSize++;
		}

		subTreeSize += sizeOfSubTree(n.getLeft()) + sizeOfSubTree(n.getRight()); // we add the sizes of left and right sub-tree
		return subTreeSize;
	}

	/**
     * Return a List with all values in this Binary Search Tree that are less than
     * the parameter <tt>value</tt>.
     * <tt>value</tt> != null<br>
     * @param value the cutoff value
     * @return a List with all values in this tree that are less than the parameter value. If there are
     * no values in this tree less than value return an empty list. The elements of the list are in ascending order.
     */
	public List<E> getAllLessThan(E value) {
		if (value == null) {
			throw new IllegalArgumentException("Pre-conditions are not satisfied.");
		}
		return getAllLessThanHelper(root, new ArrayList<E>(), value);
	}

	// this helper method does the actual recursion for the get all less than method
	public List<E> getAllLessThanHelper(BSTNode<E> n, ArrayList<E> elementList, E value) {
		if (n == null) { // if we hit a null node, we just do nothing
			return elementList;
		}

		getAllLessThanHelper(n.getLeft(), elementList, value);
		if (n.getData().compareTo(value) < 0) { // if the node data is less than the value, we add it to our list
			elementList.add(n.getData());
			getAllLessThanHelper(n.getRight(), elementList, value); // we ONLY check right if the if statement is true
		}

		return elementList;
	}

    /**
     * Return a List with all values in this Binary Search Tree that are greater than
     * the parameter <tt>value</tt>.
     * <tt>value</tt> != null<br>
     * @param value the cutoff value
     * @return a List with all values in this tree that are greater than the parameter value. If there are
     * no values in this tree greater than value return an empty list. The elements of the list are in ascending order.
     */
	public List<E> getAllGreaterThan(E value) {
		return getAllGreaterThanHelper(root, new ArrayList<E>(), value);
	}

    // this helper method does the actual recursion for the get all greater than method
    public List<E> getAllGreaterThanHelper(BSTNode<E> n, ArrayList<E> elementList, E value){
    	if(n == null) { // if we hit a null node, we just do nothing
    		return elementList;
    	}
    	
    	if(n.getData().compareTo(value) > 0) { // if the node data is greater than the value, we add it to our list
    		getAllGreaterThanHelper(n.getLeft(), elementList, value); // we ONLY check left if the if statement is true
        	elementList.add(n.getData());
    	}
    	getAllGreaterThanHelper(n.getRight(), elementList, value);
    	
    	return elementList;
    }

    /**
     * Find the number of nodes in this tree at the specified depth.
     * <br>pre: none
     * @param d The target depth.
     * @return The number of nodes in this tree at a depth equal to
     * the parameter d.
     */
	public int numNodesAtDepth(int d) {
		return numNodesAtDepthHelper(root, d, 0);
	}
    
	// this helper method does the actual recursion for the num nodes at depth method
	private int numNodesAtDepthHelper(BSTNode<E> n, int d, int currDepth) {
		if (n == null) {
			return 0;
		}
		
		int sum = 0;
		if (d == currDepth) {
			sum++;
		}
		sum += numNodesAtDepthHelper(n.getLeft(), d, currDepth + 1) + numNodesAtDepthHelper(n.getRight(), d, currDepth + 1);

		return sum;
	}

	/**
     * Prints a vertical representation of this tree.
     * The tree has been rotated counter clockwise 90
     * degrees. The root is on the left. Each node is printed
     * out on its own row. A node's children will not necessarily
     * be at the rows directly above and below a row. They will
     * be indented three spaces from the parent. Nodes indented the
     * same amount are at the same depth.
     * <br>pre: none
     */
    public void printTree() {
        printTree(root, "");
    }

    private void printTree(BSTNode<E> n, String spaces) {
        if(n != null){
            printTree(n.getRight(), spaces + "  ");
            System.out.println(spaces + n.getData());
            printTree(n.getLeft(), spaces + "  ");
        }
    }

    private static class BSTNode<E extends Comparable<? super E>> {
        private E data;
        private BSTNode<E> left;
        private BSTNode<E> right;

        public BSTNode() {
            this(null);
        }

        public BSTNode(E initValue) {
            this(null, initValue, null); 
        }

        public BSTNode(BSTNode<E> initLeft,
                E initValue,        
                BSTNode<E> initRight) {
            data = initValue; 
            left = initLeft; 
            right = initRight; 
        }

        public E getData() { 
            return data; 
        }

        public BSTNode<E> getLeft() { 
            return left;
        }

        public BSTNode<E> getRight() { 
            return right; 
        }

        public void setData(E theNewValue) { 
            data = theNewValue; 
        }

        public void setLeft(BSTNode<E> theNewLeft) { 
            left = theNewLeft; 
        }

        public void setRight(BSTNode<E> theNewRight) { 
            right = theNewRight; 
        }    
    }
}